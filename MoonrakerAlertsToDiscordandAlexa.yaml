blueprint:
  name: "Moonraker Alerts To Discord and Alexa"
  description: >
    Notify via Discord and Alexa when the printer starts, progresses, pauses, and finishes printing.
    Includes customizable notification times and camera entities.
    Compatible with printers using Moonraker.

  domain: automation

  input:
    main_sensor:
      name: Main Printer Sensor
      description: >
        The main sensor for your printer's state (e.g., 'sensor.your_printer_current_print_state').
        Example: `sensor.neptune_max_current_print_state`.
      selector:
        entity:
          domain: sensor

    time_after:
      name: Notification Start Time
      description: >
        The earliest time for notifications (e.g., 09:00:00).
      default: "09:00:00"
      selector:
        time:

    time_before:
      name: Notification End Time
      description: >
        The latest time for notifications (e.g., 23:59:00).
      default: "23:59:00"
      selector:
        time:

    camera_thumbnail:
      name: Thumbnail Camera
      description: >
        Camera entity for thumbnail images during job start. 
        Example: `camera.your_printer_thumbnail`.
      selector:
        entity:
          domain: camera

    camera_webcam:
      name: Webcam Camera
      description: >
        Camera entity for live images during job progress and other events. 
        Example: `camera.your_printer_webcam`.
      selector:
        entity:
          domain: camera

    alexa_notification_entity:
      name: Alexa Notification Service
      description: >
        Your Alexa media player entity for announcements. 
        Manually enter the entity name if the dropdown is empty (e.g., `notify.alexa_media_echo`).
      default: notify.alexa_media_echoclockdot
      selector:
        text: {}

trigger:
  - platform: state
    entity_id: !input main_sensor
    from: [idle, standby, completed, error]
    to: printing
    id: started

  - platform: state
    entity_id: !input main_sensor
    from: paused
    to: printing
    id: resumed

  - platform: state
    entity_id: "{{ !input.main_sensor.split('_')[0] }}_{{ !input.main_sensor.split('_')[1] }}_progress"
    id: progress

  - platform: state
    entity_id: !input main_sensor
    from: printing
    to: [idle, standby, completed, error]
    id: finished

  - platform: state
    entity_id: !input main_sensor
    to: paused
    id: paused

condition:
  - condition: or
    conditions:
      - condition: trigger
        id: started
      - condition: trigger
        id: resumed
      - condition: trigger
        id: finished
      - condition: trigger
        id: paused
      - condition: template
        value_template: >
          {{ trigger.to_state.state | float % 5 == 0 and trigger.to_state.state | float > 0 and trigger.id == 'progress' }}

  - condition: template
    value_template: >
      {% if trigger.id == 'started' %}
        {{ not is_state(states('!input main_sensor'), 'paused') }}
      {% else %}
        true
      {% endif %}

action:
  - delay: "00:00:01"
  - service: camera.snapshot
    target:
      entity_id: >
        {% if trigger.id == 'started' %}
          {{ states('!input.camera_thumbnail') }}
        {% else %}
          {{ states('!input.camera_webcam') }}
        {% endif %}
    data:
      filename: /config/www/moonraker_snapshot.jpg

  - delay: "00:00:02"

  # Discord Notification
  - service: shell_command.printer_notify_webhook
    data_template:
      message: >-
        {% if trigger.id == 'paused' %}
          ⏸️ Print Job Paused!
        {% elif trigger.id == 'resumed' %}
          🔄 Print Job Resumed!
        {% elif trigger.id == 'started' %}
          🖨️ Print Job Started! 📄 File: {{ states("!input.main_sensor").split('_')[0] }}_filename
        {% elif trigger.id == 'progress' %}
          📢 Printing is at {{ states("!input.main_sensor").split('_')[0] }}_progress
          ...
        {% elif trigger.id == 'finished' %}
            Specific stuff:
---....

Let me user test out FULL walkthrough!
